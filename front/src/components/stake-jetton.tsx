import { useState } from "react";
import { useTonConnect } from "../hooks/useTonConnect";
import { Address, beginCell, toNano, fromNano } from "@ton/core";
import "./stake-jetton.css"
import { useTonClient } from "../hooks/useTonClient";
// import { useStakingNFTs } from "../hooks/useStakingNFTs";
import { useJettonContracts } from "../hooks/useJettonContracts";
import { useStakingContract } from "../hooks/useStakingContract";


export const StakeJetton = () => {
    const { wallet, sender } = useTonConnect()
    const tonClient = useTonClient();
    const [jettonToStakeAmount, setJettonToStakeAmount] = useState("");
    const [loading, setLoading] = useState(false);

    const { staking, stakingData, collectionData } = useStakingContract();
    const { jettonWallet, jettonWalletAddress, jettonBalance } = useJettonContracts(wallet);
    // const { nfts } = useStakingNFTs(wallet ? Address.parse(wallet).toString(): null)

    const handleStake = async () => {
        if (!jettonWallet) {
        alert("connect wallet");
            return;
        }

        if (!jettonToStakeAmount) {
            alert("enter an amount jettons to stake");
            return;
        }

        if (!tonClient) {
          alert("connection fail");
          return;
        }

        if (!staking) {
          alert("connection fail");
          return;
        }

        setLoading(true);

        // const appJettonWalletAddress = await staking.getJettonWalletAddress();

        // console.log("jetton wallet address to procces stake -> " + appJettonWalletAddress)

        await jettonWallet.sendTransfer(sender, {
          toAddress: Address.parse("kQBJnxNZL8gBhFKCA8biCJzAMHdFm29yKNppAjio_6Gq1ros".toString()),
            queryId: 0,
            fwdAmount: toNano('0.05'),
            jettonAmount: toNano(jettonToStakeAmount),
            forwardPayload: beginCell()
                .storeUint(0x77b2286b, 32)
                .endCell(),
        });

        setLoading(false);
    }
    
    return (
      <>
        <div className="staking-container">
          <h1 className="staking-title">Staking Jettons</h1>
    
          <div className="staking-input-group">
            <label className="staking-label">
              –ö—ñ–ª—å–∫—ñ—Å—Ç—å Jetton –¥–ª—è —Å—Ç–µ–π–∫—ñ–Ω–≥—É
            </label>
            <input
              type="number"
              placeholder="10"
              value={jettonToStakeAmount}
              onChange={(e) => setJettonToStakeAmount(e.target.value)}
              className="staking-input"
            />
          </div>
    
          <button
            onClick={handleStake}
            disabled={loading || !jettonToStakeAmount}
            className="staking-button"
          >
            {loading ? '–í—ñ–¥–ø—Ä–∞–≤–∫–∞...' : '–°—Ç–µ–π–∫–Ω—É—Ç–∏ Jetton'}
          </button>
    
          {/* {message && ( 
            <p className="staking-message">{message}</p>
          )} */}
    
          <div className="staking-footer">
            <p>–¢–≤—ñ–π –≥–∞–º–∞–Ω–µ—Ü—å: {wallet ? Address.parse(wallet).toString() : '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ'}</p>
            <p>–¢–≤—ñ–π –∂–µ—Ç–æ–Ω –≥–∞–º–∞–Ω–µ—Ü—å: {jettonWalletAddress ? Address.parse(jettonWalletAddress.toString()).toString() : '–ù–µ–º–∞—î'}</p>
            <p>–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å –∂–µ—Ç–æ–Ω—ñ–≤: {jettonBalance ? jettonBalance : '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ'}</p>
          </div>
        </div>
        <div className="staking-data">
          <h2>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç–µ–π–∫—ñ–Ω–≥:</h2>

          {stakingData ? (
            <div className="staking-data-block">
              <p>üìà –†—ñ—á–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫: {(Number(stakingData.percentYear) / 10000000 * 100).toFixed(2)}%</p>
              <p>
                ‚è≥ –ü–µ—Ä—ñ–æ–¥ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:{" "}
                {Math.floor(Number(stakingData.lockupPeriod) / 86400)} –¥–Ω—ñ–≤{" "}
                {Math.floor((Number(stakingData.lockupPeriod) % 86400) / 3600)} –≥–æ–¥.
              </p>
              <p>üéÅ –í—Å—å–æ–≥–æ –Ω–∞–≥–æ—Ä–æ–¥: {fromNano(stakingData.totalReward)}</p>
              <p>üí∞ –ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞: {fromNano(stakingData.currentReward)}</p>
            </div>
          ) : (
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–µ–π–∫—ñ–Ω–≥—É...</p>
          )}

          {collectionData ? (
            <div className="staking-data-block">
              <h2>–ö–æ–ª–µ–∫—Ü—ñ—è NFT</h2>
              <p>üÜî –ù–∞—Å—Ç—É–ø–Ω–∏–π NFT —ñ–Ω–¥–µ–∫—Å: {collectionData.nextItemIndex.toString()}</p>
              <p>üëë –í–ª–∞—Å–Ω–∏–∫ –∫–æ–ª–µ–∫—Ü—ñ—ó: {collectionData.owner.toString()}</p>
            </div>
          ) : (
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–ª–µ–∫—Ü—ñ—ó...</p>
          )}
        </div>
        <div>
          {/* {loading ? (
            <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è NFT...</p>
          ) : (
            nfts.map((nft, i) => <p key={i}>{nft}</p>)
          )} */}
        </div>
      </>
      );
}